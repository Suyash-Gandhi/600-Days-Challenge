Q13. What is the difference between primitive wrapper objects 
like new String("abc") and literal values "abc"? How do they 
behave differently in comparisons and memory usage?

=> 1. Primitive String

This is a primitive value of type "string".

It’s immutable (cannot be changed directly).

Stored in the stack (call stack memory) → lightweight.

Type check:
typeof str1; // "string"
str1 instanceof String; // false

2. Wrapper object

let str2 = new String("abc");

This creates a String object (a wrapper around the primitive).

Stored in the heap (because it’s a reference type).

Much heavier compared to the literal.

Type check:

typeof str2; // "object"
str2 instanceof String; // true

String objects are also immutable in terms of content, but 
because they’re objects, they can have properties added dynamically:

let objStr = new String("hello");
objStr.custom = "world";
console.log(objStr.custom); // "world"

let primStr = "hello";
primStr.custom = "world";
console.log(primStr.custom); // undefined