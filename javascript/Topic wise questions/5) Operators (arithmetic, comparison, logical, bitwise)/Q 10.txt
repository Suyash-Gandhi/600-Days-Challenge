Q10. Why bitwise operators are limited to 32-bit integers in 
JavaScript

=> JavaScript Number Type:

In JavaScript, all numbers (except BigInt) are represented as 
64-bit floating-point numbers (IEEE 754 standard).

However, bitwise operations (&, |, ^, ~, <<, >>, >>>) are 
designed to work on integers, not floating-point numbers.

Conversion to 32-bit Signed Integers:

Before performing a bitwise operation, JavaScript internally 
converts the number to a 32-bit signed integer.

This is done using ToInt32 coercion, which takes the lower 32 
bits of the number’s binary representation.

After the operation, the result is converted back to a 64-bit 
JavaScript number.

Signed 32-bit Representation:

32-bit signed integers range from -2³¹ to 2³¹ - 1 (-2147483648 to 2147483647).

This means that any number outside this range will wrap around 
or lose higher bits when used in a bitwise operation.

Problems for very large numbers

Precision Loss:

Numbers beyond ±2³¹ lose information because only the lower 32 
bits are considered.

let large = 2147483648; // 2^31
console.log(large | 0); // 0, because upper bits are discarded


Unexpected Results / Overflow:

Large positive numbers may appear negative after a bitwise 
operation.

console.log(4294967295 | 0); // -1


Not Suitable for BigInt:

Bitwise operators cannot be used with BigInt. You must use 
BigInt-specific operators (&, |, ^, ~, <<, >> with n suffix).