

# üìù 85 JavaScript Topics to Study for Interviews 

---

## 1. Core Fundamentals (Junior ‚Üí Early Intermediate)

1. Variables (`var`, `let`, `const`)
2. Data types (primitive vs reference)
3. Type coercion & conversion (`==` vs `===`)
4. Truthy and falsy values
5. Operators (arithmetic, comparison, logical, bitwise)
6. Template literals
7. Control flow (if, switch, loops)
8. Functions (declaration vs expression vs arrow)
9. `this` keyword (all binding rules)
10. Scope (global, function, block)
11. Execution context & call stack
12. Hoisting (variables & functions)
13. Closures
14. Lexical environment
15. Default parameters & rest/spread operators
16. Destructuring (arrays, objects, nested)
17. Short-circuiting (`||`, `&&`, `??`)
18. Nullish coalescing (`??`)
19. Optional chaining (`?.`)
20. `typeof` and `instanceof`

---

## 2. Objects & Arrays (Intermediate Fundamentals)

21. Object creation patterns (`Object.create`, constructors, classes)
22. Object methods (`keys`, `values`, `entries`, `assign`, `fromEntries`)
23. Property descriptors (`Object.defineProperty`)
24. Object immutability (`freeze`, `seal`)
25. Shallow vs deep copy (`structuredClone`, recursion, libraries)
26. Nested object manipulation
27. Arrays: map, filter, reduce, forEach
28. Arrays: find, findIndex, some, every, includes
29. Arrays: sort, localeCompare, compare functions
30. Flattening nested arrays (`flat`, recursion, reduce)
31. Array-like objects (arguments, NodeList)
32. Sets and Maps
33. WeakSet and WeakMap

---

## 3. Functions & Advanced Functionality

34. Higher-order functions
35. Pure vs impure functions
36. Currying & partial application
37. Function composition
38. Immediately Invoked Function Expressions (IIFE)
39. Call, Apply, Bind
40. Debounce
41. Throttle
42. Memoization
43. Tail call optimization
44. Recursive functions
45. Generators (`function`, `yield`)
46. Iterators (iterator protocol)
47. Async iterators (`for await...of`)

---

## 4. Asynchronous JavaScript

48. Event loop & task queues (microtasks vs macrotasks)
49. Callbacks
50. Promises (creation, chaining, error handling)
51. Promise combinators (`all`, `race`, `any`, `allSettled`)
52. Async/Await
53. Error handling in async code
54. setTimeout / setInterval
55. requestAnimationFrame
56. AbortController & cancellation
57. Fetch API basics & advanced (timeouts, retries, streaming)
58. XMLHttpRequest (legacy)
59. Web Workers

---

## 5. DOM & Browser APIs

60. DOM tree & traversal (`parentNode`, `children`)
61. DOM manipulation (`createElement`, `append`, `remove`)
62. Event bubbling & capturing
63. Event delegation
64. Custom events (`new Event`, `CustomEvent`)
65. MutationObserver
66. IntersectionObserver
67. LocalStorage vs SessionStorage vs Cookies
68. Clipboard API (copy/paste)
69. File API (uploads, reads)
70. Canvas basics

---

## 6. Advanced JavaScript Concepts (Senior-level Core)

71. Prototypes & prototype chain
72. Inheritance (ES5 prototype vs ES6 class)
73. Strict mode
74. Module systems (CommonJS, AMD, ESM)
75. Dynamic imports
76. EventEmitter / Pub-Sub pattern
77. Weak references & garbage collection
78. Symbol type & use cases
79. Reflect API
80. Proxy API & metaprogramming
81. Custom iterables with Symbol.iterator
82. BigInt & numeric precision issues
83. Security issues (XSS, CSRF, prototype pollution)
84. Concurrency model in JavaScript
85. Design patterns (singleton, observer, factory, module, etc.)
