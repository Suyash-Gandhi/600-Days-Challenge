Q6. What is the Temporal Dead Zone (TDZ) in relation to let and const?

=> The Temporal Dead Zone (TDZ) is the period between when a 
variable is hoisted to the top of its block scope and when it 
is actually initialized in the code.

Variables declared with let and const are hoisted like var, 
but they aren’t initialized with a default value (undefined).

During this time (TDZ), trying to access the variable will 
throw a ReferenceError.

The TDZ ends once the variable’s declaration is executed.

console.log(x); // ❌ ReferenceError: Cannot access 'x' before initialization
let x = 5;

Here:

x is hoisted to the top of the block.

But it stays in the TDZ until let x = 5; is executed.

Accessing it before initialization throws an error.

{
  // TDZ starts here
  console.log(a); // ❌ ReferenceError
  let a = 10;     // TDZ ends here
  console.log(a); // ✅ 10
}

Key Points:

var variables do not have TDZ → they are hoisted and 
initialized with undefined.

let and const have TDZ → they are hoisted but uninitialized 
until the declaration line runs.

Practical purpose: TDZ prevents us from accidentally using a 
variable before its definition, making the code safer and less 
error-prone.