Q2. What is variable hoisting in JavaScript? How does it 
    affect var, let, and const?

=> Hoisting is JavaScriptâ€™s default behavior of moving 
variable and function declarations to the top of their 
containing scope during the compilation phase, before the 
code is executed. 

Only declarations are hoisted, not initializations.

This is why sometimes variables appear to exist before 
they are defined.

2. How var is affected

Variables declared with var are hoisted and initialized with undefined.
This means you can reference them before the actual declaration line 
without a ReferenceError, but the value will be undefined.

console.log(a); // undefined
var a = 10;
console.log(a); // 10

3. How let and const are affected

Variables declared with let and const are hoisted but not initialized.
They exist in the Temporal Dead Zone (TDZ) from the start of 
the block until the declaration is encountered.

Accessing them before declaration throws a ReferenceError.

console.log(b); // ReferenceError
let b = 20;

console.log(c); // ReferenceError
const c = 30;
