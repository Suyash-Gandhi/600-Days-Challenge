Q11. What will be the output of the following, and why?

typeof NaN
typeof null
typeof function() {}
typeof class {}
typeof new String("hello")


(Explain quirks in typeof.)

=> 1. typeof NaN

‚úÖ Output: "number"

NaN literally means Not-a-Number.

Despite the name, in JavaScript it is still a special numeric 
value (used to represent invalid math like 0/0).

So typeof NaN is "number".

2. typeof null

‚úÖ Output: "object"

This is a well-known bug in JavaScript from its early implementation.

In low-level representation, null was stored as a null pointer 
(0x00), which resembled an ‚Äúobject reference.‚Äù

This mistake is kept for backward compatibility, so typeof 
null always returns "object".

The correct way to check for null is:

value === null

3. typeof function() {}

‚úÖ Output: "function"

Functions in JavaScript are actually objects (first-class 
citizens).

But typeof treats them specially and returns "function" 
instead of "object".

This was introduced so developers can easily distinguish 
between normal objects and callable functions.

4. typeof class {}

‚úÖ Output: "function"

In JavaScript, class is just syntactic sugar for constructor 
functions.

Example:

class A {}
typeof A // "function"


Internally, classes are special kinds of functions that 
produce objects.

5. typeof new String("hello")

‚úÖ Output: "object"

new String("hello") creates a String object (wrapper), not a 
primitive string.

Primitives ‚Üí "hello" has typeof "hello" ‚Üí "string".

Wrappers ‚Üí new String("hello") ‚Üí "object".

//EXTRA

6. Object wrappers

typeof new String("abc") // "object"
typeof "abc"             // "string"

Quirk: Wrappers (new String, new Number, new Boolean) are 
objects, not primitives.

Can cause weird behavior in comparisons:

new String("abc") === "abc" // false

7. Special numeric values

typeof Infinity // "number"
typeof -Infinity // "number"

Infinity values are numbers, not a separate type.

üí° Interview Tip:
Whenever you see typeof questions, remember these patterns:

null ‚Üí "object" (bug)

Arrays ‚Üí "object", use Array.isArray()

Functions ‚Üí "function"

Wrapper objects ‚Üí "object"

NaN ‚Üí "number"