Q17. Give simillar querks like null

=> 1. null

typeof null // "object"

Quirk: Itâ€™s a primitive, but typeof reports "object".

Reason: Legacy bug; never fixed due to backward compatibility.

2. Array

typeof [] // "object"
Array.isArray([]) // true

Quirk: Arrays are objects. typeof cannot distinguish them.

Fix: Use Array.isArray().

3. Function

typeof function(){} // "function"

Note: Functions are technically objects, but typeof returns 
"function".

Why: For convenience and clarity; functions are callable 
objects.


4. Object wrappers

typeof new String("abc") // "object"
typeof "abc"             // "string"

Quirk: Wrappers (new String, new Number, new Boolean) are 
objects, not primitives.

Can cause weird behavior in comparisons:

new String("abc") === "abc" // false

5. Class

typeof class {} // "function"

Quirk: Classes are syntactic sugar over functions. typeof 
shows "function".

6. Special numeric values

typeof Infinity // "number"
typeof -Infinity // "number"

Infinity values are numbers, not a separate type.

ðŸ’¡ Interview Tip:
Whenever you see typeof questions, remember these patterns:

null â†’ "object" (bug)

Arrays â†’ "object", use Array.isArray()

Functions â†’ "function"

Wrapper objects â†’ "object"

NaN â†’ "number"