
1. Struct

A   `struct` in Solidity   is very much like an   object in JavaScript   — both are ways to   group related data together   under one unit.

---

### 🔹 JavaScript Object Example


let student = {
  id: 1,
  name: "Alice",
  age: 20,
  walletAddress: "0x123..."
};


Here:

   `student` is an object.
   It has   key-value pairs   like `id`, `name`, `age`, and `walletAddress`.

---

### 🔹 Solidity Struct Equivalent


struct Student {
    uint id;
    string name;
    uint age;
    address walletAddress;
}

Student public student1 = Student(1, "Alice", 20, 0x123...);


In   Solidity  , a   `struct` (short for structure)   is a   user-defined data type   that lets you group different variables (possibly of different types) together under a single name.

Structs are useful for organizing complex data — for example, when you want to represent a   person, product, transaction, or NFT   with multiple related properties.

---

### 🔹 Basic Definition


struct StructName {
    type variable1;
    type variable2;
    ...
}


A `struct` can hold   multiple data fields   such as integers, strings, addresses, or even arrays and mappings.

---

### 🔸 Example: Representing a Student


pragma solidity ^0.8.0;

contract School {
    struct Student {
        uint id;
        string name;
        uint age;
        address walletAddress;
    }

    Student public student1;
}


Here:

   `Student` is the struct type.
   It has four fields: `id`, `name`, `age`, and `walletAddress`.

---

### 🔹 Initializing a Struct

You can assign values to a struct in   three different ways  :

#### 1. Positional assignment


student1 = Student(1, "Alice", 20, msg.sender);


#### 2. Key-value assignment


student1 = Student({id: 1, name: "Alice", age: 20, walletAddress: msg.sender});


#### 3. Direct field assignment


student1.id = 1;
student1.name = "Alice";
student1.age = 20;
student1.walletAddress = msg.sender;


---

### 🔸 Using Structs with Arrays

Structs are often stored in arrays to keep track of multiple records.


Student[] public students;

function addStudent(uint _id, string memory _name, uint _age) public {
    students.push(Student(_id, _name, _age, msg.sender));
}


Here, `students` is a   dynamic array   of `Student` structs — perfect for managing a list of students.

---

### 🔹 Structs Inside Mappings

You can also store structs in mappings for quick lookups:


mapping(uint => Student) public studentRecords;

function addStudent(uint _id, string memory _name, uint _age) public {
    studentRecords[_id] = Student(_id, _name, _age, msg.sender);
}


Now you can retrieve a student’s info using their ID:


Student memory s = studentRecords[_id];


---

### 🔸 Structs Within Structs (Nested Structs)

You can define   nested structs   to model more complex data:


struct Course {
    string courseName;
    uint credits;
}

struct Student {
    uint id;
    string name;
    Course course;
}


---

### ⚙️ Key Points to Remember

| Feature         | Explanation                                         |
| --------------- | --------------------------------------------------- |
|   Type          | User-defined (you create it yourself)               |
|   Storage       | Can be stored in `storage`, `memory`, or `calldata` |
|   Usage         | Organize related data (like objects in OOP)         |
|   Limitations   | Cannot contain mappings if stored in `memory`       |
|   Common use    | Represent NFTs, users, products, records, etc.      |

---

2. Enum



An enum is a user-defined type used to assign names to a set of integral values, making the code more readable and manageable.

### Key Points

 Enums map to `uint` under the hood, starting from `0`.
 Useful for representing states (e.g., pending, shipped, delivered).
 They improve code clarity compared to using only numbers.
 You can get the current enum value, and it’s stored as an integer internally.

### Example

```solidity
pragma solidity ^0.8.0;

contract EnumExample {
    enum Status { Pending, Shipped, Delivered, Cancelled }

    Status public orderStatus;

    function setStatusShipped() public {
        orderStatus = Status.Shipped;
    }

    function getStatus() public view returns (Status) {
        return orderStatus;
    }
}
```

Here:

 `Status` enum has 4 states, represented internally as `0,1,2,3`.
 By default, `orderStatus` will be `Pending` (value `0`).
 You can update the state to `Shipped`, `Delivered`, etc.



## 4. Best Practices

 Use structs when you need to store complex, related information.
 Use enums for state machines or workflows where states are limited and predefined.
 Avoid very large structs inside functions to reduce gas usage.
 Enums make contracts more readable and less error-prone compared to plain integers.

---
