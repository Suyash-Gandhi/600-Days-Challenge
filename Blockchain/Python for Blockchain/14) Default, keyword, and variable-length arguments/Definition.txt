In Python, functions can accept different types of arguments to make them flexible and reusable. These include default arguments, keyword arguments, and variable-length arguments (args and **kwargs).
Letâ€™s understand each one clearly with examples ðŸ‘‡

---

## ðŸ”¹ 1. Default Arguments

Default arguments are parameters that take a default value if no value is provided during the function call.

### âœ… Example:


def greet(name="Guest"):
    print(f"Hello, {name}!")
    
greet("Suyash")   # Output: Hello, Suyash!
greet()           # Output: Hello, Guest!


### ðŸ“˜ Explanation:

 The parameter name has a default value "Guest".
 If no argument is passed, it automatically uses "Guest".

ðŸ§  Use case: Helpful when you want a function to work even if some arguments are not provided.

---

## ðŸ”¹ 2. Keyword Arguments

Keyword arguments let you specify the parameter name while passing values to a function.
This improves readability and allows you to pass arguments in any order.

### âœ… Example:


def introduce(name, age):
    print(f"My name is {name}, and I am {age} years old.")

introduce(age=21, name="Suyash")


### ðŸ“˜ Explanation:

 Here, the arguments are passed by name, not by position.
 Order doesnâ€™t matter since Python matches arguments by their names.

ðŸ§  Use case: Makes your code more readable and less error-prone when a function has many parameters.

---

## ðŸ”¹ 3. Variable-Length Arguments (args and **kwargs)

Alright ðŸ‘‡ letâ€™s break down variable-length arguments in Python step by step in a clear, detailed way â€” just like a 12-mark university answer.

---

## ðŸ§© Meaning of Variable-Length Arguments

In Python, variable-length arguments allow a function to accept any number of inputs, even if we donâ€™t know how many arguments will be passed during the function call.

There are two types of variable-length arguments:

1. *args â†’ handles multiple positional arguments
2. **kwargs â†’ handles multiple keyword arguments

They make functions flexible and reusable, especially when the number of inputs varies.

---

## ðŸ”¹ 1. *args â€” Non-keyword (Positional) Variable Arguments

### âž¤ Definition:

*args allows a function to take any number of positional arguments.
All extra values are collected into a tuple.

### âœ… Example:


def display_students(*args):
    print(args)

display_students("Suyash", "Rohan", "Aditi")


### ðŸ“¤ Output:


('Suyash', 'Rohan', 'Aditi')


### ðŸ§  Explanation:

 The *args parameter packs all the extra positional arguments into a tuple.
 You can loop through it or process it like a list.

### â–¶ Practical Example:


def add_numbers(*args):
    total = 0
    for num in args:
        total += num
    print(f"Sum = {total}")

add_numbers(5, 10, 15)
add_numbers(2, 4)


### ðŸ“¤ Output:


Sum = 30
Sum = 6


### âœ… Key Points:

 args is just a name (you can call it anything, but by convention, itâ€™s args).
 The * symbol before the name is what makes it variable-length.
 Itâ€™s useful when you want a function that can handle different numbers of inputs.

---

## ðŸ”¹ 2. **kwargs â€” Keyword Variable Arguments

### âž¤ Definition:

**kwargs allows a function to take any number of keyword arguments.
All extra named arguments are collected into a dictionary.

### âœ… Example:


def show_details(**kwargs):
    print(kwargs)

show_details(name="Suyash", age=21, country="India")


### ðŸ“¤ Output:


{'name': 'Suyash', 'age': 21, 'country': 'India'}


### ðŸ§  Explanation:

 The **kwargs parameter collects arguments as key-value pairs.
 Useful when you want to pass optional named data.

### â–¶ Practical Example:


def display_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

display_info(name="Suyash", course="Python", level="Beginner")


### ðŸ“¤ Output:


name: Suyash
course: Python
level: Beginner


---

## ðŸ”¹ 3. Using args and **kwargs Together

You can use both in the same function â€” args must come before **kwargs.

### âœ… Example:


def example(a, *args, **kwargs):
    print("a =", a)
    print("args =", args)
    print("kwargs =", kwargs)

example(1, 2, 3, x=10, y=20)


### ðŸ“¤ Output:


a = 1
args = (2, 3)
kwargs = {'x': 10, 'y': 20}


### ðŸ§  Explanation:

 a is a normal argument.
 *args stores extra positional values (2, 3).
 **kwargs stores keyword values {'x': 10, 'y': 20}.

---

## ðŸ”¹ 4. Why Use Variable-Length Arguments?

| Feature      | Description                                            | Example Use                       |
| ------------ | ------------------------------------------------------ | --------------------------------- |
| Flexibility  | Function can take different number of inputs           | sum(1,2) or sum(1,2,3,4)      |
| Readability  | Reduces need for multiple overloaded functions         | One add_numbers() works for all |
| Dynamic Data | Useful when working with unknown or optional arguments | Logging, APIs, config files       |

---

