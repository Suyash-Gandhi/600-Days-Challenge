Let’s go step-by-step through Operators in Python — one of the most important foundational topics.

---

## 🧠 Definition

Operators in Python are symbols or keywords that perform operations on variables and values.
For example:

```python
a = 10
b = 5
print(a + b)   # + is an operator
```

Here, `+` is an arithmetic operator that adds `a` and `b`.

---

## ⚙️ Types of Operators in Python

Python provides several types of operators:

### 1. Arithmetic Operators

Used for basic mathematical operations.

| Operator | Description              | Example   | Output |
| -------- | ------------------------ | --------- | ------ |
| `+`      | Addition                 | `10 + 5`  | `15`   |
| `-`      | Subtraction              | `10 - 5`  | `5`    |
| `*`      | Multiplication           | `10  5`   | `50`   |
| `/`      | Division (returns float) | `10 / 5`  | `2.0`  |
| `//`     | Floor Division           | `10 // 3` | `3`    |
| `%`      | Modulus (remainder)      | `10 % 3`  | `1`    |
| `**`     | Exponentiation (power)   | `2  3`    | `8`    |

---

### 2. Comparison (Relational) Operators

Used to compare two values. Returns a Boolean (`True` or `False`).

| Operator | Description              | Example  | Output  |
| -------- | ------------------------ | -------- | ------- |
| `==`     | Equal to                 | `5 == 5` | `True`  |
| `!=`     | Not equal to             | `5 != 3` | `True`  |
| `>`      | Greater than             | `5 > 3`  | `True`  |
| `<`      | Less than                | `5 < 3`  | `False` |
| `>=`     | Greater than or equal to | `5 >= 5` | `True`  |
| `<=`     | Less than or equal to    | `3 <= 5` | `True`  |

---

### 3. Logical Operators

Used to combine conditional statements.

| Operator | Description                  | Example              | Output  |
| -------- | ---------------------------- | -------------------- | ------- |
| `and`    | True if both are true        | `(5 > 3 and 10 > 5)` | `True`  |
| `or`     | True if at least one is true | `(5 > 10 or 10 > 5)` | `True`  |
| `not`    | Reverses the result          | `not(5 > 3)`         | `False` |

---

### 4. Assignment Operators

Used to assign values to variables.

| Operator | Example   | Equivalent To   |
| -------- | --------- | --------------- |
| `=`      | `x = 5`   | Assigns value 5 |
| `+=`     | `x += 3`  | `x = x + 3`     |
| `-=`     | `x -= 2`  | `x = x - 2`     |
| `*=`     | `x *= 4`  | `x = x * 4`     |
| `/=`     | `x /= 2`  | `x = x / 2`     |
| `%=`     | `x %= 3`  | `x = x % 3`     |
| `**=`    | `x **= 2` | `x = x ** 2`    |
| `//=`    | `x //= 2` | `x = x // 2`    |

---

### 5. Bitwise Operators

Operate on binary (bit-level) data.

| Operator | Description | Example  | Binary Result             |    |             |             |
| -------- | ----------- | -------- | ------------------------- | -- | ----------- | ----------- |
| `&`      | AND         | `5 & 3`  | `1` → (`101 & 011 = 001`) |    |             |             |
| `        | `           | OR       | `5                        | 3` | `7` → (`101 | 011 = 111`) |
| `^`      | XOR         | `5 ^ 3`  | `6` → (`101 ^ 011 = 110`) |    |             |             |
| `~`      | NOT         | `~5`     | `-6`                      |    |             |             |
| `<<`     | Left Shift  | `5 << 1` | `10`                      |    |             |             |
| `>>`     | Right Shift | `5 >> 1` | `2`                       |    |             |             |

---

### 6. Membership Operators

Used to test if a value is a member of a sequence (like list, tuple, string).

| Operator | Description               | Example              | Output |
| -------- | ------------------------- | -------------------- | ------ |
| `in`     | Returns True if found     | `'a' in 'apple'`     | `True` |
| `not in` | Returns True if not found | `'b' not in 'apple'` | `True` |

---

### 7. Identity Operators

Used to compare memory locations of two objects.

| Operator | Description                       | Example      | Output       |
| -------- | --------------------------------- | ------------ | ------------ |
| `is`     | True if both refer to same object | `a is b`     | `True/False` |
| `is not` | True if not same object           | `a is not b` | `True/False` |

---

## 🧩 Example Program

```python
a = 10
b = 5

# Arithmetic
print(a + b)

# Comparison
print(a > b)

# Logical
print(a > 5 and b < 10)

# Membership
print('p' in 'python')

# Identity
x = [1, 2, 3]
y = x
print(x is y)
```

---

## 🏁 Summary

| Category   | Purpose                   |
| ---------- | ------------------------- |
| Arithmetic | Mathematical calculations |
| Comparison | Comparing values          |
| Logical    | Combine conditions        |
| Assignment | Assign/update variables   |
| Bitwise    | Binary operations         |
| Membership | Test if element exists    |
| Identity   | Compare object references |

