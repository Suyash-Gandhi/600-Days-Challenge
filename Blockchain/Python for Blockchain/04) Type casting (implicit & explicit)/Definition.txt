
Type casting (also called type conversion) refers to changing the data type of a variable from one type to another.
In Python, this can happen automatically (implicit) or be done manually by the programmer (explicit).

---

## üß† 1. What is Type Casting?

Type casting allows you to convert variables from one data type to another, such as from an integer to a float, or from a string to an integer.
It ensures data is used correctly and avoids type errors in expressions or operations.

---

## ‚öôÔ∏è 2. Types of Type Casting in Python

There are two main types:

| Type                      | Description                                              | Example         |
| ------------------------- | -------------------------------------------------------- | --------------- |
| Implicit Type Casting | Done automatically by Python                             | x = 5 + 3.2   |
| Explicit Type Casting | Done manually by the programmer using built-in functions | x = int("10") |

---

## üß© 3. Implicit Type Casting (Automatic Conversion)

 Python automatically converts one data type to another when needed.
 This happens when you perform operations involving different numeric types (e.g., int + float).

### ‚úÖ Example:


x = 10      # int
y = 3.5     # float

result = x + y   # int + float ‚Üí float
print(result)    # Output: 13.5
print(type(result))  # Output: <class 'float'>


Explanation:
Here, Python converts x (integer) to a float automatically before performing the addition.

### ‚ö†Ô∏è Note:

 Implicit conversion happens only when it‚Äôs safe (no data loss).
 For example, converting int ‚Üí float is safe, but not vice versa.

---

## ‚úã 4. Explicit Type Casting (Manual Conversion)

 Explicit conversion is done manually using built-in functions like:

   int()
   float()
   str()
   bool()
   list()
   tuple()
   set()

### ‚úÖ Example:


a = "10"
b = "3.5"

# Converting strings to numbers
num1 = int(a)
num2 = float(b)

result = num1 + num2
print(result)  # Output: 13.5
print(type(result))  # Output: <class 'float'>


---

## üßÆ 5. Common Explicit Type Casting Functions

| Function   | Description                | Example          | Output            |
| ---------- | -------------------------- | ---------------- | ----------------- |
| int(x)     | Converts x to an integer   | int(3.7)         | 3                 |
| float(x)   | Converts x to a float      | float(5)         | 5.0               |
| str(x)     | Converts x to a string     | str(10)          | '10'              |
| bool(x)    | Converts x to a Boolean    | bool(0)          | False             |
| list(x)    | Converts iterable to list  | list('abc')      | ['a', 'b', 'c']   |
| tuple(x)   | Converts iterable to tuple | tuple([1,2,3])   | (1, 2, 3)         |
| set(x)     | Converts iterable to set   | set([1,2,2,3])   | {1, 2, 3}         |

---

## üö´ 6. Invalid Conversions (Causing Errors)

Not all conversions are valid.
For example:


x = "hello"
y = int(x)   # ‚ùå Error: invalid literal for int()


You can only convert strings that represent numbers (like "10", "3.5") to numeric types.

---

## üßæ 7. Comparison Between Implicit and Explicit Casting

| Feature           | Implicit Casting        | Explicit Casting             |
| ----------------- | ----------------------- | ---------------------------- |
| Performed by      | Python interpreter      | Programmer                   |
| Control           | Automatic               | Manual                       |
| Risk of data loss | None (Python avoids it) | Possible (e.g., float ‚Üí int) |
| Example           | 5 + 2.0 ‚Üí 7.0         | int(2.9) ‚Üí 2               |

---

## üß† 8. Summary

 Type Casting = Converting one data type to another.
 Implicit Casting = Automatic and safe (done by Python).
 Explicit Casting = Manual using functions (int(), float(), str(), etc.).
 Always check if the conversion is valid and safe to avoid runtime errors.

