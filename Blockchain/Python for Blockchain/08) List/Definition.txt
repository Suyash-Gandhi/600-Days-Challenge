### Lists in Python

A list in Python is a collection data type that allows you to store multiple items in a single variable. Lists are ordered, mutable (changeable), and can contain elements of different data types (integers, strings, floats, etc.).

---

## üß† 1. Creating a List

You can create a list by placing elements inside square brackets `[ ]`, separated by commas.

```python
fruits = ["apple", "banana", "cherry"]
numbers = [10, 20, 30, 40]
mixed = [1, "hello", 3.5, True]
```

‚úÖ Key Points:

 Lists can contain duplicates.
 Elements are indexed (starting from 0).
 You can nest lists inside other lists (multi-dimensional lists).

```python
nested_list = [[1, 2], [3, 4]]
```

---

## üìç 2. Accessing List Elements

You can access elements using indexing or slicing.

```python
fruits = ["apple", "banana", "cherry", "mango"]

print(fruits[0])      # apple
print(fruits[-1])     # mango (negative index means from end)
print(fruits[1:3])    # ['banana', 'cherry']
```

---

## üîÅ 3. Modifying Lists

Lists are mutable, meaning you can change, add, or remove elements.

### a) Changing Elements

```python
fruits[1] = "blueberry"
print(fruits)  # ['apple', 'blueberry', 'cherry', 'mango']
```

### b) Adding Elements

```python
fruits.append("orange")      # Add at the end
fruits.insert(2, "grape")    # Insert at a specific index
print(fruits)
```

### c) Removing Elements

```python
fruits.remove("apple")   # Removes by value
fruits.pop(1)            # Removes by index
del fruits[0]            # Deletes element at index 0
fruits.clear()           # Removes all elements
```

---

## üß© 4. Useful List Methods

| Method             | Description                              | Example                              |
| ------------------ | ---------------------------------------- | ------------------------------------ |
| `append(x)`        | Adds an item to the end                  | `fruits.append("kiwi")`              |
| `insert(i, x)`     | Inserts at position `i`                  | `fruits.insert(1, "pear")`           |
| `remove(x)`        | Removes first occurrence of `x`          | `fruits.remove("apple")`             |
| `pop(i)`           | Removes and returns element at index `i` | `fruits.pop(2)`                      |
| `clear()`          | Removes all elements                     | `fruits.clear()`                     |
| `sort()`           | Sorts list (ascending by default)        | `numbers.sort()`                     |
| `reverse()`        | Reverses the list                        | `numbers.reverse()`                  |
| `count(x)`         | Returns number of times `x` appears      | `fruits.count("apple")`              |
| `index(x)`         | Returns index of first `x`               | `fruits.index("banana")`             |
| `copy()`           | Returns a shallow copy                   | `new_list = fruits.copy()`           |
| `extend(iterable)` | Adds items from another iterable         | `fruits.extend(["papaya", "melon"])` |

---

## üßÆ 5. Iterating Through Lists

You can loop through a list using a `for` loop:

```python
for fruit in fruits:
    print(fruit)
```

Or use `while` loop:

```python
i = 0
while i < len(fruits):
    print(fruits[i])
    i += 1
```

---

## ‚öôÔ∏è 6. List Operations

### Concatenation

```python
list1 = [1, 2, 3]
list2 = [4, 5]
combined = list1 + list2   # [1, 2, 3, 4, 5]
```

### Repetition

```python
numbers = [1, 2] * 3       # [1, 2, 1, 2, 1, 2]
```

### Membership

```python
if "apple" in fruits:
    print("Found!")
```

---

## üß± 7. List Comprehensions

A compact way to create lists using expressions.

```python
squares = [x**2 for x in range(1, 6)]
print(squares)   # [1, 4, 9, 16, 25]
```

You can also use conditions:

```python
even = [x for x in range(10) if x % 2 == 0]
print(even)  # [0, 2, 4, 6, 8]
```

---

## üí° 8. Nested Lists (2D Lists)

Lists can contain other lists, forming a matrix-like structure.

```python
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print(matrix[1][2])  # 6
```

---

## üßæ 9. Copying Lists (Important Concept)

Direct assignment copies reference, not the list itself.

```python
a = [1, 2, 3]
b = a
b[0] = 100
print(a)  # [100, 2, 3]  (both refer to same object)
```

To copy safely:

```python
b = a.copy()
# or
b = list(a)
# or
import copy
b = copy.deepcopy(a)  # for nested lists
```

---

## üß† 10. Summary

| Feature       | Description                   |
| ------------- | ----------------------------- |
| Ordered       | Items have a defined order    |
| Mutable       | Can be changed after creation |
| Indexed       | Accessed using indices        |
| Heterogeneous | Can store multiple data types |
| Dynamic       | Can grow or shrink in size    |


