

 1. Arithmetic Operators

Arithmetic operators are used for performing basic mathematical calculations.

 Addition (+) â†’ Adds two operands.
 Subtraction (-) â†’ Subtracts the right operand from the left.
 Multiplication (*) â†’ Multiplies two operands.
 Division (/) â†’ Divides the left operand by the right (integer division for integers).
 Modulo (%) â†’ Returns the remainder after division.
 Exponentiation () â†’ Raises a number to the power of another.
 Increment (++) â†’ Increases value by 1.
 Decrement (--) â†’ Decreases value by 1.

ðŸ“Œ Example:

solidity
uint a = 10;
uint b = 3;
uint c = a % b; // 1


---

 2. Comparison (Relational) Operators

These operators compare two values and return a boolean result (true or false).

 Equal (==) â†’ True if both are equal.
 Not equal (!=) â†’ True if they are not equal.
 Greater than (>) â†’ True if left is greater.
 Less than (<) â†’ True if left is smaller.
 Greater than or equal (>=)
 Less than or equal (<=)

ðŸ“Œ Example:

solidity
uint x = 5;
uint y = 10;
bool result = x < y; // true


---

 3. Logical Operators

Logical operators are used to combine or invert boolean values.

 AND (&&) â†’ Returns true if both are true.
 OR (||) â†’ Returns true if at least one is true.
 NOT (!) â†’ Inverts the boolean value.

ðŸ“Œ Example:

solidity
bool a = true;
bool b = false;
bool c = a && b; // false


---

 4. Bitwise Operators

Bitwise operators perform operations at the binary level (bit by bit).

 AND (&) â†’ 1 if both bits are 1.
 OR (|) â†’ 1 if at least one bit is 1.
 XOR (^) â†’ 1 if only one bit is 1.
 NOT (~) â†’ Inverts all bits.
 Left Shift (<<) â†’ Shifts bits to the left.
 Right Shift (>>) â†’ Shifts bits to the right.

ðŸ“Œ Example:

solidity
uint8 a = 5;   // 0101 in binary
uint8 b = 3;   // 0011 in binary
uint8 c = a & b; // 0001 -> 1


---

 ðŸ”‘ Key Points / Best Practices

1. Division with integers truncates decimals (e.g., 5 / 2 = 2).
2. ++ and -- are rarely used in Solidity 0.8+ because of gas efficiency concerns.
3. Overflow/underflow errors are automatically checked in Solidity ^0.8.0 (safe math).
4. Logical operators are mainly used in require, if, and assert statements.
5. Bitwise operators are useful in low-level programming like flags, permissions, and cryptographic applications.

---
In Solidity, there is no === or !== operator like in JavaScript.

ðŸ”Ž Why?

In JavaScript,

== â†’ loose equality (does type coercion).

=== â†’ strict equality (no type coercion, checks type + value).

In Solidity,

Solidity is a statically typed language.

Since every variable has a fixed type (e.g., uint, bool, address), there is no need for type coercion.

Therefore, only == (equal) and != (not equal) are provided. They already act as strict comparison operators because mismatched types will not even compile.