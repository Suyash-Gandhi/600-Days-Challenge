

#  Node.js Interview Master List (90 Topics)

---

### 1. Core Node.js Fundamentals (Junior -> Strong Base)

1. What Node.js is and why it's different from browsers
2. Node.js architecture (single-threaded, event-driven)
3. Event loop phases & call stack/queue
4. Non-blocking I/O model
5. Global objects (`__dirname`, `__filename`, `process`, etc.)
6. REPL basics & debugging in Node
7. Modules - CommonJS vs ES modules (`require` vs `import`)
8. Built-in modules overview (fs, path, os, http, url, crypto, util, events, etc.)
9. File system operations - sync vs async methods
10. Buffer & Stream basics
11. Events & EventEmitter
12. Error-first callback pattern
13. Environment variables (`process.env`)
14. NPM & package.json (scripts, dependencies, devDependencies)
15. Semantic versioning in npm

---

### 2. Asynchronous Programming

16. Callbacks - advantages & pitfalls (callback hell)
17. Promises - creation, chaining, error handling
18. Async/Await - syntax, error handling, try/catch
19. `util.promisify`
20. Parallel vs sequential async tasks
21. Event loop in async (timers, setImmediate, nextTick)
22. Async Iterators & Generators
23. Handling backpressure with streams

---

### 3. HTTP & Networking

24. Creating a basic HTTP server with `http` module
25. Request/response objects & parsing
26. Working with query strings and URL module
27. Handling headers & cookies manually
28. REST API basics without Express
29. HTTPS & TLS basics in Node
30. WebSockets (ws library, Socket.IO)
31. HTTP/2 basics
32. Handling large file uploads/downloads

---

### 4. Express.js & Frameworks

33. Setting up Express server
34. Middleware - concept & chaining
35. Router and route parameters
36. Handling static files
37. Error-handling middleware
38. Request validation (Joi, Zod, express-validator)
39. Authentication with JWT, cookies, sessions
40. Role-based access control (RBAC)
41. File upload with Multer
42. Express best practices (structure, separation of concerns)
43. Rate limiting & security middleware (helmet, express-rate-limit)
44. Logging requests (morgan, Winston)

---

### 5. Databases & Persistence

45. SQL vs NoSQL in Node.js
46. Using MongoDB with Mongoose - schema, models, queries
47. Using MySQL/PostgreSQL with Sequelize/Prisma
48. CRUD operations with DB from Node
49. Connection pooling
50. Transactions in relational DBs
51. Indexing & performance optimization basics
52. Caching with Redis
53. ORMs vs raw queries

---

### 6. Authentication & Security

54. Password hashing with bcrypt/argon2
55. JWT - structure, signing, verification
56. OAuth 2.0 basics (Google/GitHub login)
57. CSRF protection
58. CORS - configuration & security concerns
59. Rate limiting & DoS prevention
60. Helmet.js for securing headers
61. SQL/NoSQL injection prevention
62. XSS & sanitization libraries

---

### 7. Streams & File Handling

63. Readable, writable, duplex, transform streams
64. Piping streams
65. Stream backpressure management
66. File uploads & chunk handling
67. Compression (zlib, gzip)

---

### 8. Testing & Quality

68. Unit testing with Mocha/Jest
69. Supertest for API testing
70. Sinon for mocking/stubbing
71. Code coverage tools (nyc, istanbul)
72. Integration vs end-to-end testing
73. Test-driven development (TDD) in Node

---

### 9. Performance & Optimization

74. Cluster module for multi-core scaling
75. Worker Threads vs child processes
76. Load balancing concepts
77. PM2 process manager basics
78. Caching with Redis/memory cache
79. Profiling Node apps (clinic.js, node --inspect)
80. Handling memory leaks

---

### 10. Advanced & Production Topics

81. Event-driven architecture in Node apps
82. Message queues (RabbitMQ, Kafka, BullMQ with Redis)
83. WebSockets deep dive with scaling (Socket.IO adapters)
84. GraphQL with Node.js (Apollo/Express GraphQL)
85. Microservices architecture with Node.js
86. gRPC with Node.js
87. Dockerizing Node.js apps
88. CI/CD basics for Node apps (GitHub Actions, Jenkins)
89. Monitoring & logging (Winston, ELK stack, Sentry)
90. Best practices for structuring large Node.js projects

---
